name: Deploy srv-cad-usuarios to ECS

on:
  push:
    branches-ignore:
      - development # Não rodar em pushes para a branch development
  pull_request:
    branches:
      - main # Rodar em PRs para a branch master


permissions:
  id-token: write # Necessário para autenticação OIDC com AWS
  contents: read  # Necessário para fazer checkout do código

env:
  # Defina estes como segredos ou variáveis no seu repositório srv-cad-usuarios
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME || 'srv-cad-usuarios' }} # Nome do repositório ECR
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME || 'real-state-java-services-cluster-dev' }} # Nome do seu cluster ECS
  ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME || 'srv-cad-usuarios-dev' }} # Nome do seu serviço ECS
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY || 'srv-cad-usuarios-dev' }} # Família da Task Definition
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME || 'srv-cad-usuarios' }} # Nome do container na Task Definition

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 # Ou a versão do Java que seu projeto usa
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # Ou 'corretto', 'zulu', etc.
          cache: 'maven' # Ou 'gradle'

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME}} # ARN do IAM Role para este workflow
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Usa o hash do commit como tag da imagem
        run: |
          mvn clean package
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT # Adiciona a tag como output

      - name: Update image tag secret in infra repository
        env:
          GH_TOKEN: ${{ secrets.INFRA_REPO_PAT }} # Crie este secret no repositório srv-cad-usuarios
          IMAGE_TAG: ${{ steps.build-image.outputs.image_tag }}
          INFRA_REPO_OWNER_AND_NAME: "jaredejr/real-state-tf-services-infra" # Seu repositório de infraestrutura
          SECRET_NAME_IN_INFRA_REPO: "SRV_CAD_USUARIOS_IMAGE_TAG" # O nome do secret no repo de infra
        run: |
          echo "Updating ${SECRET_NAME_IN_INFRA_REPO} in ${INFRA_REPO_OWNER_AND_NAME} to ${IMAGE_TAG}"
          gh secret set ${SECRET_NAME_IN_INFRA_REPO} -b "${IMAGE_TAG}" -R ${INFRA_REPO_OWNER_AND_NAME}

      - name: Download task definition
        id: download-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
          echo "task_definition_path=$(pwd)/task-definition.json" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-def.outputs.task_definition_path }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image_uri }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true # Espera o serviço estabilizar após o deploy

      - name: Logout of Amazon ECR
        if: always() # Garante que o logout ocorra mesmo se os passos anteriores falharem
        run: docker logout ${{ steps.login-ecr.outputs.registry }}